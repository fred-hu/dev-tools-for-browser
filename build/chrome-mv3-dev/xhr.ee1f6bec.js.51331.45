(function(define){var __define; typeof define === "function" && (__define=define,define=null);
// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"7cC0G":[function(require,module,exports) {
// \u5411content-script\u53d1\u9001\u6d88\u606f\uff1a\u5f85\u540c\u6b65PROXY_ROUTES
// prettier-ignore
var _utils = require("~scripts/utils");
var _constants = require("~constants");
var _utils1 = require("~utils");
window.postMessage({
    event: (0, _constants.MESSAGE_TYPES).updateRoutes
});
(function() {
    const OriginalXMLHttpRequest = window.XMLHttpRequest;
    const REQUEST_MAP = new Map();
    window[(0, _constants.GLOBAL_VARIABLE).CHROME_PLUS_REQUEST_MAP] = REQUEST_MAP;
    let PROXY_ROUTES = window[(0, _constants.GLOBAL_VARIABLE).CHROME_PLUS_PROXY_ROUTES] ?? [];
    window.addEventListener("message", function(msg) {
        const { data } = msg;
        if (data.event === (0, _constants.MESSAGE_TYPES).matchingUpdate) // \u6536\u5230\u6765\u81eacontent script\u7684\u4ee3\u7406\u8def\u7531
        PROXY_ROUTES = data.data || [];
        else if (data.event === (0, _constants.MESSAGE_TYPES).setState) {
            // \u6765\u81eabackground \u901a\u77e5\u4fee\u6539\u72b6\u6001
            const state = data.data || {};
            const xhr = REQUEST_MAP.get(data.id);
            if (xhr) {
                const { response, ...otherState } = state;
                xhr.response = response;
                for(const key in otherState)if (Object.prototype.hasOwnProperty.call(otherState, key)) {
                    const val = otherState[key];
                    xhr[key] = val;
                    if (key === "readyState") xhr?.onreadystatechange?.();
                }
            }
        } else if (data.event === (0, _constants.MESSAGE_TYPES).invokeFunction) {
            const { method, args } = data.data || {};
            const xhr = REQUEST_MAP.get(data.id);
            if (xhr) xhr?.[method]?.(...args);
        }
    });
    function dataURLtoBlob(dataUrl) {
        const arr = dataUrl.split(",");
        const mime = arr[0].match(/:(.*?);/)[1];
        const bstr = atob(arr[1]);
        let n = bstr.length;
        const u8arr = new Uint8Array(n);
        while(n--)u8arr[n] = bstr.charCodeAt(n);
        return new Blob([
            u8arr
        ], {
            type: mime
        });
    }
    // Define a MockXMLHttpRequest
    class MockXMLHttpRequest {
        constructor(){
            this.requestId = "";
            this.readyState = 0;
            this.status = 0;
            this.statusText = "";
            this.responseText = "";
            this.responseXML = null;
            this.responseURL = "";
            this.responseType = "";
            this.response = null;
            this.withCredentials = false;
            this.upload = {};
            this.timeout = 0;
            this.onreadystatechange = ()=>{};
            this.onload = ()=>{};
            this.onerror = ()=>{};
            this.ontimeout = ()=>{};
            this.onprogress = ()=>{};
            this.onloadstart = ()=>{};
            this.onloadend = ()=>{};
            this.requestHeaders = {};
            this.responseHeaders = {};
            this.method = null;
            this.url = null;
            this.async = true;
            this.user = null;
            this.password = null;
            this.requestData = null;
            this.originXhr = new OriginalXMLHttpRequest(); // Assuming OriginalXMLHttpRequest is defined elsewhere
            this.enableProxy = false;
        }
        setUseProxy(bool) {
            this.enableProxy = bool;
        }
        setRuleId(id) {
            this.ruleId = id;
        }
        open(method, url, async = true, user, password) {
            this.method = method;
            this.url = (0, _utils1.validateUrl)(url);
            this.async = async;
            this.user = user || null;
            this.password = password || null;
            this.readyState = 1; // OPENED
            this.onreadystatechange?.();
        }
        send(data) {
            this.requestData = data;
        }
        setRequestHeader(header, value) {
            this.requestHeaders[header] = value;
        }
        getAllResponseHeaders() {
            return this.enableProxy ? this.responseHeaders : this.originXhr.getAllResponseHeaders();
        }
        getResponseHeader(key) {
            return this.enableProxy ? this.responseHeaders[key] : this.originXhr.getResponseHeader(key);
        }
        abort() {
            if (this.readyState === 4) return;
            this.readyState = 0; // UNSENT
            this.onabort?.();
        }
    }
    function ProxyXHR() {
        const xhr = new MockXMLHttpRequest();
        xhr.requestId = (0, _utils.generateUUID)();
        if (REQUEST_MAP.size >= 10) REQUEST_MAP.clear();
        REQUEST_MAP.set(xhr.requestId, xhr);
        return new Proxy(xhr, {
            set (target, prop, value, receiver) {
                // console.log("set------", prop, value)
                if (typeof value === "function") //originXhr\u7684onload\u7b49\u4f1a\u81ea\u52a8\u89e6\u53d1
                target.originXhr[prop] = value.bind(target.originXhr);
                else target.originXhr[prop] = value;
                return Reflect.set(target, prop, value, receiver);
            },
            get (target, property, receiver) {
                // console.log("get------", property, target[property])
                switch(property){
                    case "open":
                        return (0, _utils.openHandler)(xhr, PROXY_ROUTES);
                    case "send":
                        return (0, _utils.sendHandler)(xhr);
                    case "setRequestHeader":
                        return (0, _utils.setRequestHeader)(xhr);
                    case "getAllResponseHeaders":
                        return (0, _utils.getAllResponseHeaders)(xhr);
                    case "getResponseHeader":
                        return (0, _utils.getResponseHeader)(xhr);
                    default:
                        const origMethod = target[property];
                        if (typeof origMethod === "function") return function(...args) {
                            console.log(`someMethod has been intercepted`);
                            // \u53ef\u4ee5\u5728\u8fd9\u91cc\u6dfb\u52a0\u62e6\u622a\u903b\u8f91
                            const result = origMethod.apply(target, args);
                            // \u53ef\u4ee5\u5728\u8fd9\u91cc\u4fee\u6539\u8fd4\u56de\u503c\u6216\u8005\u6267\u884c\u5176\u4ed6\u64cd\u4f5c
                            return result;
                        };
                        return Reflect.get(target, property, receiver);
                }
            }
        });
    }
    window[(0, _constants.GLOBAL_VARIABLE).CHROME_PLUS_ORIGINAL_XHR] = OriginalXMLHttpRequest;
    window[(0, _constants.GLOBAL_VARIABLE).CHROME_PLUS_PROXY_XHR] = ProxyXHR;
    window.XMLHttpRequest = ProxyXHR;
})();

},{"~scripts/utils":"jtgcU","~constants":"8KODc","~utils":"9Ea3L"}],"jtgcU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "openHandler", ()=>openHandler);
parcelHelpers.export(exports, "sendHandler", ()=>sendHandler);
parcelHelpers.export(exports, "setRequestHeader", ()=>setRequestHeader);
parcelHelpers.export(exports, "getAllResponseHeaders", ()=>getAllResponseHeaders);
parcelHelpers.export(exports, "getResponseHeader", ()=>getResponseHeader);
parcelHelpers.export(exports, "TaskQueue", ()=>TaskQueue);
parcelHelpers.export(exports, "generateUUID", ()=>generateUUID);
var _constants = require("~constants");
var _utils = require("~utils");
const useProxyCheck = (xhr, routes, method, originalUrl)=>{
    let route;
    const enableRoutes = routes.filter(({ enable, mockType })=>enable && mockType === (0, _constants.MOCK_TYPE).NORMAL);
    const enable = enableRoutes.some((item)=>{
        const { url, matchType, requestType } = item;
        const isMethodMatched = method.toLowerCase() === requestType.toLowerCase() || requestType === (0, _constants.REQUEST_TYPE).ALL;
        if (isMethodMatched) {
            if (matchType === (0, _constants.MATCH_TYPE).REGEXP) {
                const REG = new RegExp(url, "g");
                return REG.test(originalUrl) && (route = item);
            }
            if (matchType === (0, _constants.MATCH_TYPE).CONTAINS) return originalUrl.includes(url) && (route = item);
            if (matchType === (0, _constants.MATCH_TYPE).EQUALS) return originalUrl === url && (route = item);
        }
        return false;
    });
    if (enable) {
        xhr.setUseProxy(true);
        xhr.setRuleId(route?.id);
    }
    return enable;
};
function openHandler(xhr, PROXY_ROUTES = []) {
    const { requestId: id, requestHeaders = {} } = xhr;
    return function(method, url, async, user, password) {
        const absoluteUrl = (0, _utils.validateUrl)(url);
        // \u5224\u65ad\u662f\u5426\u9700\u8981\u4ee3\u7406
        const enableProxy = useProxyCheck(xhr, PROXY_ROUTES, method, absoluteUrl);
        if (enableProxy) {
            // eslint-disable-next-line prefer-rest-params
            xhr.originXhr.open(...arguments);
            xhr.open(method, url, async, user, password);
            window.postMessage({
                event: (0, _constants.MESSAGE_TYPES).open,
                id,
                data: {
                    method,
                    url: absoluteUrl,
                    async,
                    ruleId: xhr.ruleId,
                    user,
                    password
                }
            });
        } else {
            xhr.setUseProxy(false);
            // eslint-disable-next-line prefer-rest-params
            xhr.originXhr.open(...arguments);
            // \u8bbe\u7f6e\u54cd\u5e94\u5934
            for(const key in requestHeaders)if (Object.prototype.hasOwnProperty.call(requestHeaders, key)) {
                const value = requestHeaders[key];
                xhr.originXhr.setRequestHeader(key, value);
            }
        }
    };
}
function sendHandler(xhr) {
    return function(body) {
        xhr.body = body;
        const { url, requestId: id, method, requestHeaders, responseType, ruleId } = xhr;
        // \u5224\u65ad\u662f\u5426\u9700\u8981\u4ee3\u7406
        if (xhr.enableProxy) window.postMessage({
            event: (0, _constants.MESSAGE_TYPES).send,
            id,
            data: {
                body,
                url,
                method,
                ruleId,
                headers: requestHeaders,
                responseType
            }
        });
        else {
            xhr.originXhr.send(body);
            setTimeout(()=>{
                xhr.originXhr.onreadystatechange = function() {
                    const { readyState, status, response, responseURL } = xhr.originXhr;
                    xhr.readyState = readyState;
                    xhr.status = status;
                    xhr.statusText = xhr?.originXhr?.statusText;
                    xhr.response = response;
                    xhr.responseURL = responseURL;
                    if (responseType === "" || responseType === "document") xhr.responseXML = xhr?.originXhr?.responseXML;
                    if (responseType === "" || responseType === "text") xhr.responseText = xhr?.originXhr?.responseText;
                    xhr?.onreadystatechange?.();
                };
                xhr.originXhr.onerror = function() {
                    xhr.onerror?.();
                };
                xhr.originXhr.onload = function() {
                    xhr.onload?.();
                };
                xhr.originXhr.onloadend = function() {
                    xhr.onloadend?.();
                };
                xhr.originXhr.ontimeout = function() {
                    xhr.ontimeout?.();
                };
                xhr.originXhr.onloadstart = function() {
                    xhr.onloadstart?.();
                };
                xhr.originXhr.onabort = function() {
                    xhr.onabort?.();
                };
                xhr.originXhr.onprogress = function() {
                    xhr.onprogress?.();
                };
                xhr.originXhr?.onreadystatechange?.();
            }, 0);
        }
    };
}
function setRequestHeader(xhr) {
    return function(header, value) {
        xhr.enableProxy ? xhr.setRequestHeader(header, value) : xhr.originXhr.setRequestHeader(header, value);
    };
}
function getAllResponseHeaders(xhr) {
    return function() {
        return xhr.enableProxy ? xhr.responseHeaders : xhr.originXhr.getAllResponseHeaders();
    };
}
function getResponseHeader(xhr) {
    return function(key) {
        return xhr.enableProxy ? xhr.responseHeaders[key.toLowerCase()] : xhr.originXhr.getResponseHeader(key);
    };
}
const timeout = 20;
class TaskQueue {
    pushTask(task) {
        this.queue.push(task);
    }
    // open \u4efb\u52a1\u9700\u8981\u63d2\u961f
    unShiftTask(task) {
        this.queue.unshift(task);
    }
    async start() {
        setTimeout(async ()=>{
            // this.console('start')
            if (this.queue.length > 0) {
                const task = this.queue.shift();
                await go(task);
            }
            await this.start();
        }, timeout);
    }
    console(msg) {
    // console.log(msg, this.queue.length)
    }
    constructor(){
        this.queue = [];
    }
}
async function go(task) {
    await task();
}
function generateUUID() {
    const cryptoObj = window.crypto || window.msCrypto // \u83b7\u53d6\u52a0\u5bc6\u5bf9\u8c61
    ;
    if (cryptoObj) {
        const buffer = new Uint16Array(8);
        cryptoObj.getRandomValues(buffer) // \u751f\u6210\u968f\u673a\u6570
        ;
        return pad4(buffer[0]) + pad4(buffer[1]) + "-" + pad4(buffer[2]) + "-" + pad4(buffer[3]) + "-" + pad4(buffer[4]) + "-" + pad4(buffer[5]) + pad4(buffer[6]) + pad4(buffer[7]);
    } else // \u5982\u679c\u6d4f\u89c8\u5668\u4e0d\u652f\u6301crypto API\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u5907\u7528\u65b9\u6cd5\u751f\u6210UUID
    return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0, v = c == "x" ? r : r & 0x3 | 0x8;
        return v.toString(16);
    });
}
function pad4(num) {
    let ret = num.toString(16);
    while(ret.length < 4)ret = "0" + ret;
    return ret;
}
exports.default = {
    MESSAGE_TYPES: (0, _constants.MESSAGE_TYPES),
    openHandler,
    sendHandler,
    setRequestHeader,
    getAllResponseHeaders,
    getResponseHeader,
    TaskQueue,
    generateUUID
};

},{"~constants":"8KODc","~utils":"9Ea3L","@parcel/transformer-js/src/esmodule-helpers.js":"5G9Z5"}],"8KODc":[function(require,module,exports) {
/* eslint-disable no-unused-vars */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MESSAGE_TYPES", ()=>MESSAGE_TYPES);
parcelHelpers.export(exports, "OPERATE_TYPE", ()=>OPERATE_TYPE);
parcelHelpers.export(exports, "REQUEST_TYPE", ()=>REQUEST_TYPE);
parcelHelpers.export(exports, "REQUEST_TYPE_DICT", ()=>REQUEST_TYPE_DICT);
parcelHelpers.export(exports, "REQUEST_TYPE_OPTIONS", ()=>REQUEST_TYPE_OPTIONS);
parcelHelpers.export(exports, "PROXY_ROUTE_KEY", ()=>PROXY_ROUTE_KEY);
parcelHelpers.export(exports, "MOCK_TYPE", ()=>MOCK_TYPE);
parcelHelpers.export(exports, "MOCK_TYPE_DICT", ()=>MOCK_TYPE_DICT);
parcelHelpers.export(exports, "MOCK_TYPE_OPTIONS", ()=>MOCK_TYPE_OPTIONS);
parcelHelpers.export(exports, "MATCH_TYPE", ()=>MATCH_TYPE);
parcelHelpers.export(exports, "MATCH_TYPE_DICT", ()=>MATCH_TYPE_DICT);
parcelHelpers.export(exports, "ResourceType", ()=>ResourceType);
parcelHelpers.export(exports, "RuleActionType", ()=>RuleActionType);
parcelHelpers.export(exports, "MATCH_TYPE_OPTIONS", ()=>MATCH_TYPE_OPTIONS);
parcelHelpers.export(exports, "HTTP_STATUS_CODE_OPTIONS", ()=>HTTP_STATUS_CODE_OPTIONS);
parcelHelpers.export(exports, "GLOBAL_VARIABLE", ()=>GLOBAL_VARIABLE);
parcelHelpers.export(exports, "GLOBAL_VARIABLE_MAP", ()=>GLOBAL_VARIABLE_MAP);
var _utils = require("~utils");
var _httpStatus = require("./httpStatus");
const MESSAGE_TYPES = {
    open: "open",
    send: "send",
    setRequestHeader: "setRequestHeader",
    setState: "setState",
    invokeFunction: "invokeFunction",
    matchingUpdate: "matchingUpdate",
    updateRoutes: "updateRoutes",
    setLoading: "setLoading"
};
var OPERATE_TYPE;
(function(OPERATE_TYPE) {
    OPERATE_TYPE["EDIT"] = "edit";
    OPERATE_TYPE["DELETE"] = "delete";
    OPERATE_TYPE["UPDATE_RECORD"] = "updateRecord";
    OPERATE_TYPE["TOP"] = "top";
    OPERATE_TYPE["CLONE"] = "clone";
})(OPERATE_TYPE || (OPERATE_TYPE = {}));
var REQUEST_TYPE;
(function(REQUEST_TYPE) {
    REQUEST_TYPE["ALL"] = "*";
    REQUEST_TYPE["GET"] = "get";
    REQUEST_TYPE["POST"] = "post";
    REQUEST_TYPE["PUT"] = "put";
    REQUEST_TYPE["DELETE"] = "delete";
    REQUEST_TYPE["HEAD"] = "head";
    REQUEST_TYPE["OPTIONS"] = "options";
    REQUEST_TYPE["PATCH"] = "patch";
    REQUEST_TYPE["TRACE"] = "trace" // \u56de\u663e\u670d\u52a1\u5668\u6536\u5230\u7684\u8bf7\u6c42\uff0c\u4e3b\u8981\u7528\u4e8e\u6d4b\u8bd5\u6216\u8bca\u65ad\u3002
    ;
})(REQUEST_TYPE || (REQUEST_TYPE = {}));
const REQUEST_TYPE_DICT = {
    [REQUEST_TYPE.ALL]: "\u4e0d\u9650",
    [REQUEST_TYPE.GET]: "GET",
    [REQUEST_TYPE.POST]: "POST",
    [REQUEST_TYPE.PUT]: "PUT",
    [REQUEST_TYPE.DELETE]: "DELETE",
    [REQUEST_TYPE.HEAD]: "HEAD",
    [REQUEST_TYPE.OPTIONS]: "OPTIONS",
    [REQUEST_TYPE.PATCH]: "PATCH",
    [REQUEST_TYPE.TRACE]: "TRACE"
};
const REQUEST_TYPE_OPTIONS = (0, _utils.convertDictToArray)(REQUEST_TYPE_DICT);
var PROXY_ROUTE_KEY;
(function(PROXY_ROUTE_KEY) {
    PROXY_ROUTE_KEY["ID"] = "id";
    PROXY_ROUTE_KEY["MOCK_TYPE"] = "mockType";
    PROXY_ROUTE_KEY["ENABLE"] = "enable";
    PROXY_ROUTE_KEY["MATCH_TYPE"] = "matchType";
    PROXY_ROUTE_KEY["REQUEST_TYPE"] = "requestType";
    PROXY_ROUTE_KEY["RESPONSE_STATUS"] = "responseStatus";
    PROXY_ROUTE_KEY["REDIRECT_URL"] = "redirectUrl";
    PROXY_ROUTE_KEY["DELAY"] = "delay";
    PROXY_ROUTE_KEY["URL"] = "url";
    PROXY_ROUTE_KEY["NAME"] = "name";
    PROXY_ROUTE_KEY["RESPONSE"] = "response";
    PROXY_ROUTE_KEY["MOCK_REQUEST_HEADERS"] = "mockRequestHeaders";
    PROXY_ROUTE_KEY["ENABLE_MOCK_REQUEST_HEADERS"] = "enableMockRequestHeaders";
    PROXY_ROUTE_KEY["REQUEST_HEADERS"] = "requestHeaders";
    PROXY_ROUTE_KEY["MOCK_RESPONSE_HEADERS"] = "mockResponseHeaders";
    PROXY_ROUTE_KEY["ENABLE_MOCK_RESPONSE_HEADERS"] = "enableMockResponseHeaders";
    PROXY_ROUTE_KEY["RESPONSE_HEADERS"] = "responseHeaders";
})(PROXY_ROUTE_KEY || (PROXY_ROUTE_KEY = {}));
var MOCK_TYPE;
(function(MOCK_TYPE) {
    MOCK_TYPE["NORMAL"] = "normal";
    MOCK_TYPE["REDIRECT"] = "redirect";
    MOCK_TYPE["MODIFY_HEADERS"] = "modifyHeaders";
})(MOCK_TYPE || (MOCK_TYPE = {}));
const MOCK_TYPE_DICT = {
    [MOCK_TYPE.NORMAL]: "Mock",
    [MOCK_TYPE.REDIRECT]: "Redirect",
    [MOCK_TYPE.MODIFY_HEADERS]: "ModifyHeaders"
};
const MOCK_TYPE_OPTIONS = (0, _utils.convertDictToArray)(MOCK_TYPE_DICT);
var MATCH_TYPE;
(function(MATCH_TYPE) {
    MATCH_TYPE["CONTAINS"] = "contains";
    MATCH_TYPE["EQUALS"] = "equals";
    MATCH_TYPE["REGEXP"] = "regexp";
})(MATCH_TYPE || (MATCH_TYPE = {}));
const MATCH_TYPE_DICT = {
    [MATCH_TYPE.CONTAINS]: "contains",
    [MATCH_TYPE.EQUALS]: "equals",
    [MATCH_TYPE.REGEXP]: "regexp"
};
var ResourceType;
(function(ResourceType) {
    ResourceType["MAIN_FRAME"] = "main_frame";
    ResourceType["SUB_FRAME"] = "sub_frame";
    ResourceType["STYLESHEET"] = "stylesheet";
    ResourceType["SCRIPT"] = "script";
    ResourceType["IMAGE"] = "image";
    ResourceType["FONT"] = "font";
    ResourceType["OBJECT"] = "object";
    ResourceType["XMLHTTPREQUEST"] = "xmlhttprequest";
    ResourceType["PING"] = "ping";
    ResourceType["CSP_REPORT"] = "csp_report";
    ResourceType["MEDIA"] = "media";
    ResourceType["WEBSOCKET"] = "websocket";
    ResourceType["OTHER"] = "other";
    ResourceType["WEBBUNDLE"] = "webbundle";
    ResourceType["WEBTRANSPORT"] = "webtransport";
})(ResourceType || (ResourceType = {}));
var RuleActionType;
(function(RuleActionType) {
    RuleActionType["BLOCK"] = "block";
    RuleActionType["REDIRECT"] = "redirect";
    RuleActionType["ALLOW"] = "allow";
    RuleActionType["UPGRADE_SCHEME"] = "upgradeScheme";
    RuleActionType["MODIFY_HEADERS"] = "modifyHeaders";
    RuleActionType["ALLOW_ALL_REQUESTS"] = "allowAllRequests";
})(RuleActionType || (RuleActionType = {}));
const MATCH_TYPE_OPTIONS = (0, _utils.convertDictToArray)(MATCH_TYPE_DICT);
const HTTP_STATUS_CODE_OPTIONS = Object.keys((0, _httpStatus.HTTP_STATUS_CODE_DICT)).map((v)=>({
        value: +v,
        label: `${v} ${(0, _httpStatus.HTTP_STATUS_CODE_DICT)[v]}`
    }));
var GLOBAL_VARIABLE;
(function(GLOBAL_VARIABLE) {
    GLOBAL_VARIABLE["CHROME_PLUS_ORIGINAL_XHR"] = "CHROME_PLUS_ORIGINAL_XHR";
    GLOBAL_VARIABLE["CHROME_PLUS_REQUEST_MAP"] = "CHROME_PLUS_REQUEST_MAP";
    GLOBAL_VARIABLE["CHROME_PLUS_PROXY_XHR"] = "CHROME_PLUS_PROXY_XHR";
    GLOBAL_VARIABLE["CHROME_PLUS_PROXY_ROUTES"] = "CHROME_PLUS_PROXY_ROUTES";
})(GLOBAL_VARIABLE || (GLOBAL_VARIABLE = {}));
const GLOBAL_VARIABLE_MAP = {
    [GLOBAL_VARIABLE.CHROME_PLUS_ORIGINAL_XHR]: "CHROME_PLUS_ORIGINAL_XHR",
    [GLOBAL_VARIABLE.CHROME_PLUS_REQUEST_MAP]: "CHROME_PLUS_REQUEST_MAP",
    [GLOBAL_VARIABLE.CHROME_PLUS_PROXY_XHR]: "CHROME_PLUS_PROXY_XHR",
    [GLOBAL_VARIABLE.CHROME_PLUS_PROXY_ROUTES]: "CHROME_PLUS_PROXY_ROUTES"
};
exports.default = {
    PROXY_ROUTE_KEY,
    MOCK_TYPE,
    MOCK_TYPE_DICT,
    MOCK_TYPE_OPTIONS,
    MATCH_TYPE,
    HTTP_STATUS_CODE: (0, _httpStatus.HTTP_STATUS_CODE),
    MESSAGE_TYPES,
    GLOBAL_VARIABLE_MAP
};

},{"~utils":"9Ea3L","./httpStatus":"bjRjc","@parcel/transformer-js/src/esmodule-helpers.js":"5G9Z5"}],"9Ea3L":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "log", ()=>log);
parcelHelpers.export(exports, "convertDictToArray", ()=>convertDictToArray);
parcelHelpers.export(exports, "validateUrl", ()=>validateUrl);
parcelHelpers.export(exports, "moveToTop", ()=>moveToTop);
const log = (data)=>chrome.devtools.inspectedWindow.eval(`console.log('${JSON.stringify(data)}')`);
function convertDictToArray(dict, config = [
    "value",
    "label"
]) {
    const [keyName = "value", valueName = "label"] = config;
    return Object.entries(dict).map(([key, value])=>({
            [keyName]: key,
            [valueName]: value
        }));
}
function validateUrl(url) {
    try {
        // \u5c1d\u8bd5\u521b\u5efa\u4e00\u4e2aURL\u5bf9\u8c61
        const parsedUrl = new URL(url);
        // \u68c0\u67e5\u534f\u8bae\u662f\u5426\u4e3ahttp\u6216https
        if (parsedUrl.protocol === "http:" || parsedUrl.protocol === "https:") return url // \u8fd4\u56de\u539fURL\uff0c\u56e0\u4e3a\u5b83\u662f\u4e00\u4e2a\u6709\u6548\u7684HTTP(S)\u5730\u5740
        ;
        else throw new Error("Invalid protocol") // \u629b\u51fa\u9519\u8bef\uff0c\u5904\u7406\u975eHTTP(S)\u534f\u8bae
        ;
    } catch (error) {
        // \u5982\u679cURL\u6784\u9020\u5931\u8d25\u6216\u534f\u8bae\u4e0d\u6b63\u786e\uff0c\u5219\u8fd4\u56de\u4fee\u6b63\u540e\u7684URL
        return location.origin + url;
    }
}
function moveToTop(arr, index) {
    if (index >= 0 && index < arr.length) {
        // \u4ece\u6307\u5b9a\u7d22\u5f15\u4f4d\u7f6e\u79fb\u9664\u5143\u7d20
        const [item] = arr.splice(index, 1);
        // \u5c06\u8be5\u5143\u7d20\u63d2\u5165\u5230\u6570\u7ec4\u7684\u5f00\u5934
        arr.unshift(item);
    }
}
exports.default = {
    convertDictToArray,
    log,
    validateUrl,
    moveToTop
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5G9Z5"}],"5G9Z5":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"bjRjc":[function(require,module,exports) {
/* eslint-disable no-unused-vars */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HTTP_STATUS_CODE", ()=>HTTP_STATUS_CODE);
parcelHelpers.export(exports, "HTTP_STATUS_CODE_DICT", ()=>HTTP_STATUS_CODE_DICT);
var HTTP_STATUS_CODE;
(function(HTTP_STATUS_CODE) {
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["CONTINUE"] = 100] = "CONTINUE";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["SWITCHING_PROTOCOLS"] = 101] = "SWITCHING_PROTOCOLS";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["PROCESSING"] = 102] = "PROCESSING";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["OK"] = 200] = "OK";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["CREATED"] = 201] = "CREATED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["ACCEPTED"] = 202] = "ACCEPTED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["NON_AUTHORITATIVE_INFORMATION"] = 203] = "NON_AUTHORITATIVE_INFORMATION";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["NO_CONTENT"] = 204] = "NO_CONTENT";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["RESET_CONTENT"] = 205] = "RESET_CONTENT";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["PARTIAL_CONTENT"] = 206] = "PARTIAL_CONTENT";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["MULTI_STATUS"] = 207] = "MULTI_STATUS";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["ALREADY_REPORTED"] = 208] = "ALREADY_REPORTED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["IM_USED"] = 226] = "IM_USED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["MULTIPLE_CHOICES"] = 300] = "MULTIPLE_CHOICES";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["MOVED_PERMANENTLY"] = 301] = "MOVED_PERMANENTLY";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["FOUND"] = 302] = "FOUND";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["SEE_OTHER"] = 303] = "SEE_OTHER";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["NOT_MODIFIED"] = 304] = "NOT_MODIFIED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["USE_PROXY"] = 305] = "USE_PROXY";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["TEMPORARY_REDIRECT"] = 307] = "TEMPORARY_REDIRECT";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["PERMANENT_REDIRECT"] = 308] = "PERMANENT_REDIRECT";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["BAD_REQUEST"] = 400] = "BAD_REQUEST";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["UNAUTHORIZED"] = 401] = "UNAUTHORIZED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["PAYMENT_REQUIRED"] = 402] = "PAYMENT_REQUIRED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["FORBIDDEN"] = 403] = "FORBIDDEN";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["NOT_FOUND"] = 404] = "NOT_FOUND";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["METHOD_NOT_ALLOWED"] = 405] = "METHOD_NOT_ALLOWED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["NOT_ACCEPTABLE"] = 406] = "NOT_ACCEPTABLE";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["PROXY_AUTHENTICATION_REQUIRED"] = 407] = "PROXY_AUTHENTICATION_REQUIRED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["REQUEST_TIMEOUT"] = 408] = "REQUEST_TIMEOUT";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["CONFLICT"] = 409] = "CONFLICT";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["GONE"] = 410] = "GONE";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["LENGTH_REQUIRED"] = 411] = "LENGTH_REQUIRED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["PAYLOAD_TOO_LARGE"] = 413] = "PAYLOAD_TOO_LARGE";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["URI_TOO_LONG"] = 414] = "URI_TOO_LONG";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["UNSUPPORTED_MEDIA_TYPE"] = 415] = "UNSUPPORTED_MEDIA_TYPE";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["RANGE_NOT_SATISFIABLE"] = 416] = "RANGE_NOT_SATISFIABLE";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["EXPECTATION_FAILED"] = 417] = "EXPECTATION_FAILED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["I_AM_A_TEAPOT"] = 418] = "I_AM_A_TEAPOT";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["MISDIRECTED_REQUEST"] = 421] = "MISDIRECTED_REQUEST";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["UNPROCESSABLE_ENTITY"] = 422] = "UNPROCESSABLE_ENTITY";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["LOCKED"] = 423] = "LOCKED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["FAILED_DEPENDENCY"] = 424] = "FAILED_DEPENDENCY";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["UPGRADE_REQUIRED"] = 426] = "UPGRADE_REQUIRED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["PRECONDITION_REQUIRED"] = 428] = "PRECONDITION_REQUIRED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["TOO_MANY_REQUESTS"] = 429] = "TOO_MANY_REQUESTS";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["REQUEST_HEADER_FIELDS_TOO_LARGE"] = 431] = "REQUEST_HEADER_FIELDS_TOO_LARGE";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["UNAVAILABLE_FOR_LEGAL_REASONS"] = 451] = "UNAVAILABLE_FOR_LEGAL_REASONS";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["INTERNAL_SERVER_ERROR"] = 500] = "INTERNAL_SERVER_ERROR";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["NOT_IMPLEMENTED"] = 501] = "NOT_IMPLEMENTED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["BAD_GATEWAY"] = 502] = "BAD_GATEWAY";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["SERVICE_UNAVAILABLE"] = 503] = "SERVICE_UNAVAILABLE";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["GATEWAY_TIMEOUT"] = 504] = "GATEWAY_TIMEOUT";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["HTTP_VERSION_NOT_SUPPORTED"] = 505] = "HTTP_VERSION_NOT_SUPPORTED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["VARIANT_ALSO_NEGOTIATES"] = 506] = "VARIANT_ALSO_NEGOTIATES";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["INSUFFICIENT_STORAGE"] = 507] = "INSUFFICIENT_STORAGE";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["LOOP_DETECTED"] = 508] = "LOOP_DETECTED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["NOT_EXTENDED"] = 510] = "NOT_EXTENDED";
    HTTP_STATUS_CODE[HTTP_STATUS_CODE["NETWORK_AUTHENTICATION_REQUIRED"] = 511] = "NETWORK_AUTHENTICATION_REQUIRED";
})(HTTP_STATUS_CODE || (HTTP_STATUS_CODE = {}));
const HTTP_STATUS_CODE_DICT = {
    [HTTP_STATUS_CODE.CONTINUE]: "Continue",
    [HTTP_STATUS_CODE.SWITCHING_PROTOCOLS]: "Switching Protocols",
    [HTTP_STATUS_CODE.PROCESSING]: "Processing",
    [HTTP_STATUS_CODE.OK]: "OK",
    [HTTP_STATUS_CODE.CREATED]: "Created",
    [HTTP_STATUS_CODE.ACCEPTED]: "Accepted",
    [HTTP_STATUS_CODE.NON_AUTHORITATIVE_INFORMATION]: "Non-Authoritative Information",
    [HTTP_STATUS_CODE.NO_CONTENT]: "No Content",
    [HTTP_STATUS_CODE.RESET_CONTENT]: "Reset Content",
    [HTTP_STATUS_CODE.PARTIAL_CONTENT]: "Partial Content",
    [HTTP_STATUS_CODE.MULTI_STATUS]: "Multi-Status",
    [HTTP_STATUS_CODE.ALREADY_REPORTED]: "Already Reported",
    [HTTP_STATUS_CODE.MULTIPLE_CHOICES]: "Multiple Choices",
    [HTTP_STATUS_CODE.MOVED_PERMANENTLY]: "Moved Permanently",
    [HTTP_STATUS_CODE.FOUND]: "Found",
    [HTTP_STATUS_CODE.SEE_OTHER]: "See Other",
    [HTTP_STATUS_CODE.NOT_MODIFIED]: "Not Modified",
    [HTTP_STATUS_CODE.USE_PROXY]: "Use Proxy",
    [HTTP_STATUS_CODE.TEMPORARY_REDIRECT]: "Temporary Redirect",
    [HTTP_STATUS_CODE.PERMANENT_REDIRECT]: "Permanent Redirect",
    [HTTP_STATUS_CODE.BAD_REQUEST]: "Bad Request",
    [HTTP_STATUS_CODE.UNAUTHORIZED]: "Unauthorized",
    [HTTP_STATUS_CODE.PAYMENT_REQUIRED]: "Payment Required",
    [HTTP_STATUS_CODE.FORBIDDEN]: "Forbidden",
    [HTTP_STATUS_CODE.NOT_FOUND]: "Not Found",
    [HTTP_STATUS_CODE.METHOD_NOT_ALLOWED]: "Method Not Allowed",
    [HTTP_STATUS_CODE.NOT_ACCEPTABLE]: "Not Acceptable",
    [HTTP_STATUS_CODE.PROXY_AUTHENTICATION_REQUIRED]: "Proxy Authentication Required",
    [HTTP_STATUS_CODE.REQUEST_TIMEOUT]: "Request Timeout",
    [HTTP_STATUS_CODE.CONFLICT]: "Conflict",
    [HTTP_STATUS_CODE.GONE]: "Gone",
    [HTTP_STATUS_CODE.LENGTH_REQUIRED]: "Length Required",
    [HTTP_STATUS_CODE.PRECONDITION_FAILED]: "Precondition Failed",
    [HTTP_STATUS_CODE.PAYLOAD_TOO_LARGE]: "Payload Too Large",
    [HTTP_STATUS_CODE.URI_TOO_LONG]: "URI Too Long",
    [HTTP_STATUS_CODE.UNSUPPORTED_MEDIA_TYPE]: "Unsupported Media Type",
    [HTTP_STATUS_CODE.RANGE_NOT_SATISFIABLE]: "Range Not Satisfiable",
    [HTTP_STATUS_CODE.EXPECTATION_FAILED]: "Expectation Failed",
    [HTTP_STATUS_CODE.I_AM_A_TEAPOT]: "I'm a teapot",
    [HTTP_STATUS_CODE.MISDIRECTED_REQUEST]: "Misdirected Request",
    [HTTP_STATUS_CODE.UNPROCESSABLE_ENTITY]: "Unprocessable Entity",
    [HTTP_STATUS_CODE.LOCKED]: "Locked",
    [HTTP_STATUS_CODE.FAILED_DEPENDENCY]: "Failed Dependency",
    [HTTP_STATUS_CODE.UPGRADE_REQUIRED]: "Upgrade Required",
    [HTTP_STATUS_CODE.PRECONDITION_REQUIRED]: "Precondition Required",
    [HTTP_STATUS_CODE.TOO_MANY_REQUESTS]: "Too Many Requests",
    [HTTP_STATUS_CODE.REQUEST_HEADER_FIELDS_TOO_LARGE]: "Request Header Fields Too Large",
    [HTTP_STATUS_CODE.UNAVAILABLE_FOR_LEGAL_REASONS]: "Unavailable For Legal Reasons",
    [HTTP_STATUS_CODE.INTERNAL_SERVER_ERROR]: "Internal Server Error",
    [HTTP_STATUS_CODE.NOT_IMPLEMENTED]: "Not Implemented",
    [HTTP_STATUS_CODE.BAD_GATEWAY]: "Bad Gateway",
    [HTTP_STATUS_CODE.SERVICE_UNAVAILABLE]: "Service Unavailable",
    [HTTP_STATUS_CODE.GATEWAY_TIMEOUT]: "Gateway Timeout",
    [HTTP_STATUS_CODE.HTTP_VERSION_NOT_SUPPORTED]: "HTTP Version Not Supported",
    [HTTP_STATUS_CODE.VARIANT_ALSO_NEGOTIATES]: "Variant Also Negotiates",
    [HTTP_STATUS_CODE.INSUFFICIENT_STORAGE]: "Insufficient Storage",
    [HTTP_STATUS_CODE.LOOP_DETECTED]: "Loop Detected",
    [HTTP_STATUS_CODE.NOT_EXTENDED]: "Not Extended",
    [HTTP_STATUS_CODE.NETWORK_AUTHENTICATION_REQUIRED]: "Network Authentication Required"
};
exports.default = {
    HTTP_STATUS_CODE,
    HTTP_STATUS_CODE_DICT
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"5G9Z5"}]},["7cC0G"], "7cC0G", "parcelRequireb635")

//# sourceMappingURL=data:application/json;charset=utf-8;base64,
 globalThis.define=__define;  })(globalThis.define);